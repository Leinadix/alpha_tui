name: Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Version tagging job - only runs on main branch pushes
  version-tag:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_created: ${{ steps.tag_check.outputs.tag_created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if tag already exists
        id: tag_check
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
            echo "tag_created=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} already exists"
          else
            echo "tag_created=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.get_version.outputs.version }} will be created"
          fi

      - name: Create and push tag
        if: steps.tag_check.outputs.tag_created == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

  # Build job for multiple targets
  build:
    needs: version-tag
    if: always() && (needs.version-tag.outputs.tag_created == 'true' || github.event_name == 'pull_request')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install musl-tools (Linux musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../alpha_tui-${{ matrix.name }}.tar.gz alpha_tui
          cd ../../..

      - name: Create release archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../alpha_tui-${{ matrix.name }}.zip alpha_tui.exe
          cd ../../..

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alpha_tui-${{ matrix.name }}
          path: |
            alpha_tui-${{ matrix.name }}.tar.gz
            alpha_tui-${{ matrix.name }}.zip

  # Release job - creates GitHub release with binaries
  release:
    needs: [version-tag, build]
    if: needs.version-tag.outputs.tag_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version-tag.outputs.version }}
          release_name: Release v${{ needs.version-tag.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for dir in ./artifacts/*/; do
            for file in "$dir"*; do
              if [[ -f "$file" ]]; then
                echo "Uploading $file"
                curl -L \
                  -X POST \
                  -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary "@$file" \
                  "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename "$file")"
              fi
            done
          done

  # Documentation job
  documentation:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Generate documentation
        run: cargo doc --all --no-deps

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: docs